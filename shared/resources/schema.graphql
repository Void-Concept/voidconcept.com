enum MagicSchool {
    Abjuration
    Conjuration
    Divination
    Enchantment
    Evocation
    Illusion
    Necromancy
    Transmutation
}

type SpellComponents {
    verbal: Boolean!
    somatic: Boolean!
    material: String
}

# Needs to be manually kept in sync with SpellComponents
input SpellComponentsInput {
    verbal: Boolean!
    somatic: Boolean!
    material: String
}

enum SpellCastTimeType {
    REACTION
    BONUS_ACTION
    ACTION
    MINUTES
    HOURS
}

type SpellCastTime {
    type: SpellCastTimeType!
    duration: Int # Only applicable for MINUTES and HOURS
}

# Needs to be manually kept in sync with SpellCastTime
input SpellCastTimeInput {
    type: SpellCastTimeType!
    duration: Int # Only applicable for MINUTES and HOURS
}

enum SpellRangeType {
    SELF
    FEET
    TOUCH
    UNLIMITED
}

type SpellRange {
    range: SpellRangeType!
    distance: Int # Only applicable for FEET
}

# Needs to be manually kept in sync with SpellRange
input SpellRangeInput {
    range: SpellRangeType!
    distance: Int # Only applicable for FEET
}

enum SpellAreaOfEffectType {
    CUBE
    SPHERE
    CONE
    LINE
    CYLINDER
    SQUARE
}

type SpellAreaOfEffect {
    type: SpellAreaOfEffectType!
    dimensions: Int
}

# Needs to be manually kept in sync with SpellAreaOfEffect
input SpellAreaOfEffectInput {
    type: SpellAreaOfEffectType!
    dimensions: Int
}

enum SpellDurationType {
    INSTANTANEOUS
    ROUND
    MINUTES
    HOURS
    DAYS
    UNTIL_DISPELLED
    UNTIL_DISPELLED_OR_TRIGGERED
    SPECIAL
}

type SpellDuration { 
    type: SpellDurationType!,
    duration: Int # Only applicable for ROUND, MINUTES, HOURS and DAYS
}

# Needs to be manually kept in sync with SpellDuration
input SpellDurationInput { 
    type: SpellDurationType!,
    duration: Int # Only applicable for ROUND, MINUTES, HOURS and DAYS
}

enum SpellLevel {
    CANTRIP
    LVL_1ST
    LVL_2ND
    LVL_3RD
    LVL_4th
    LVL_5th
    LVL_6th
    LVL_7th
    LVL_8th
    LVL_9th
}

type Spell {
    name: String!
    level: SpellLevel!
    school: MagicSchool!
    castTime: SpellCastTime!
    range: SpellRange!
    areaOfEffect: SpellAreaOfEffect
    components: SpellComponents!
    duration: SpellDuration!
    description: [String!]!
    higherLevel: String
    concentration: Boolean!
    ritual: Boolean!
    alwaysPrepared: Boolean!
}

# Needs to be manually kept in sync with Spell
input SpellInput {
    name: String!
    level: SpellLevel!
    school: MagicSchool!
    castTime: SpellCastTimeInput!
    range: SpellRangeInput!
    areaOfEffect: SpellAreaOfEffectInput
    components: SpellComponentsInput!
    duration: SpellDurationInput!
    description: [String!]!
    higherLevel: String
    concentration: Boolean!
    ritual: Boolean!
    alwaysPrepared: Boolean!
}

type Spellbook {
    ownerId: ID!
    name: String
    maxPrepared: Int!
    spells: [Spell!]!
}

input SpellbookInput {
    name: String
    maxPrepared: Int!
    spells: [SpellInput!]!
}

type CreateSpellbookResponse {
    id: ID!
    spellbook: Spellbook!
}

type UpdateSpellbookResponse {
    id: ID!
    spellbook: Spellbook!
}

type Query {
    spellbook(id: ID!): Spellbook
}

type Mutation {
    createSpellbook(spellbook: SpellbookInput!): CreateSpellbookResponse
    updateSpellbook(id: ID!, spellbook: SpellbookInput!): UpdateSpellbookResponse
}